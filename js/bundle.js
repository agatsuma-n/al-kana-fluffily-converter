/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var alkana;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Converter.ts":
/*!**************************!*\
  !*** ./src/Converter.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Converter = void 0;\nconst converters = __importStar(__webpack_require__(/*! ./converters */ \"./src/converters/index.ts\"));\nconst utils = __importStar(__webpack_require__(/*! ./utils */ \"./src/utils/index.ts\"));\nconst types = __importStar(__webpack_require__(/*! ./types */ \"./src/types/index.ts\"));\nclass Converter {\n    constructor(word, isConvertNumbers, additionalConversions) {\n        this.beforeWord = word;\n        this.workWords = [];\n        this.afterWord = [];\n        this.isConvertNumbers = isConvertNumbers;\n        this.wordToRomaConverter = new converters.WordToRomaConverter();\n        this.romaToKanaConverter = new converters.RomaToKanaConverter();\n        this.characterToKanaConverter =\n            new converters.CharacterToKanaConverter();\n        this.numberToKanaConverter = new converters.NumberToKanaConverter();\n        this.nounToKanaConverter = new converters.NounToKanaConverter();\n        this.additionalConverter =\n            additionalConversions == null\n                ? null\n                : new converters.AdditionalConverter(additionalConversions);\n    }\n    createWorkWords(beforeValue) {\n        // 記号を変換\n        const word = utils.replaceSymbolToSpaceOrOmit(beforeValue);\n        if (word == null) {\n            return;\n        }\n        // 大文字毎に単語として扱うため\n        // 大文字の前にスペースを挿入\n        const upperSpaceWord = utils.insertSpaceBeforeUpperCase(word);\n        // 連続した数字の前にスペースを挿入\n        const numberSpaceWord = utils.insertSpaceBothSideAtNumbers(upperSpaceWord);\n        // スペース区切りで配列変換\n        this.workWords = numberSpaceWord\n            .split(/\\s+/)\n            .map((value) => value.toLocaleLowerCase());\n    }\n    convertAdditionalConversion(value) {\n        if (this.additionalConverter == null) {\n            return value;\n        }\n        return this.additionalConverter.convert(value);\n    }\n    convertAlphabet(value) {\n        return this.characterToKanaConverter.convert(value);\n    }\n    convertEnglishToKana(value) {\n        // 変換対象をローマ字に変換\n        const roma = this.wordToRomaConverter.convert(value);\n        // ローマ字をカナに変換\n        const kana = this.romaToKanaConverter.convert(roma);\n        return kana;\n    }\n    convertEnglishOrRoma(value) {\n        // ローマ字としてカナ変換\n        const romaBasedKana = this.romaToKanaConverter.convert(value);\n        // 英単語としてカナ変換\n        const englishBasedKana = this.convertEnglishToKana(value);\n        // ローマ字では変換しきれなかったため、英単語としてみなす\n        if (utils.hasAlphabet(romaBasedKana) === true) {\n            // 変換できなかった文字を文字単位でカナ変換\n            return this.characterToKanaConverter.convert(englishBasedKana);\n        }\n        // 英単語では変換しきれなかったため、ローマ字としてみなす\n        if (utils.hasAlphabet(englishBasedKana) === true) {\n            return romaBasedKana;\n        }\n        // 規定文字数以下の場合は英単語を優先する\n        return value.length <= types.EnglishLength\n            ? englishBasedKana\n            : romaBasedKana;\n    }\n    convertNumber(value) {\n        return this.numberToKanaConverter.convert(value);\n    }\n    convertNoun(value) {\n        return this.nounToKanaConverter.convert(value);\n    }\n    /**\n     * メイン関数\n     */\n    convert() {\n        // 追加辞書で変換し、英文字が無ければ返却\n        const additionalValue = this.convertAdditionalConversion(this.beforeWord);\n        if (utils.hasKanaOnly(additionalValue) === true) {\n            return additionalValue;\n        }\n        // 準備\n        this.createWorkWords(additionalValue);\n        this.afterWord = this.workWords.map((value) => {\n            // 名詞に変換\n            value = this.convertNoun(value);\n            if (utils.hasKanaOnly(value) === true) {\n                return value;\n            }\n            if (this.isConvertNumbers === true) {\n                // 数字の場合\n                if (utils.hasNumber(value) === true) {\n                    return this.convertNumber(value);\n                }\n            }\n            // 1文字の場合はアルファベット読みをする\n            if (value.length === 1) {\n                return this.convertAlphabet(value);\n            }\n            // 上記以外(英単語またはローマ)\n            return this.convertEnglishOrRoma(value);\n        });\n        return this.afterWord.join(\"\");\n    }\n}\nexports.Converter = Converter;\n\n\n//# sourceURL=webpack://alkana/./src/Converter.ts?");

/***/ }),

/***/ "./src/FluffyConverter.ts":
/*!********************************!*\
  !*** ./src/FluffyConverter.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FluffyConverter = void 0;\nconst Converter_1 = __webpack_require__(/*! ./Converter */ \"./src/Converter.ts\");\n/**\n * NGワード対策無し\n */\nclass FluffyConverter {\n    /**\n     *\n     * @param isConvertNumbers 数字の変換有無。trueなら1->ワンと言うように変換する\n     * @param additionalConversions 追加の変換一覧\n     */\n    constructor(isConvertNumbers, additionalConversions) {\n        this.isConvertNumbers = isConvertNumbers;\n        this.additionalConversions = additionalConversions;\n    }\n    /**\n     * 英単語をカナに変換する\n     * @param word 変換したい英単語\n     * @returns カナ\n     */\n    convert(word) {\n        // TODO: converterチェック\n        // 重複が存在しないか確認する\n        // 変換\n        const converter = new Converter_1.Converter(word, this.isConvertNumbers, this.additionalConversions);\n        return converter.convert();\n    }\n}\nexports.FluffyConverter = FluffyConverter;\n\n\n//# sourceURL=webpack://alkana/./src/FluffyConverter.ts?");

/***/ }),

/***/ "./src/converters/AdditionalConverter.ts":
/*!***********************************************!*\
  !*** ./src/converters/AdditionalConverter.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AdditionalConverter = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./src/converters/index.ts\");\nconst utils = __importStar(__webpack_require__(/*! ../utils */ \"./src/utils/index.ts\"));\nclass AdditionalConverter extends _1.BaseConverter {\n    constructor(additionalConversions) {\n        super();\n        this.additionalConversions = this.convertToWordConversion(additionalConversions);\n    }\n    convertToWordConversion(dictionary) {\n        return dictionary.map(({ word, kana }) => ({\n            conversionPattern: {\n                main: word,\n            },\n            afterConversion: kana,\n        }));\n    }\n    get conversions() {\n        return this.additionalConversions;\n    }\n    /**\n     * 名前付きグループ化して返却する\n     * @param pattern\n     * @returns\n     */\n    createPattern(pattern) {\n        const grouping = (name, value) => `(?<${name}>${value !== null && value !== void 0 ? value : \"\"})`;\n        return `${grouping(\"prefix\", pattern.prefix)}${grouping(\"main\", utils.escapeRegExp(pattern.main))}${grouping(\"suffix\", pattern.suffix)}`;\n    }\n    convert(word) {\n        super.convert(word);\n        // 全ての一致するパターン取得\n        const matches = this.getAllMatch(word);\n        // 変換優先順にソート\n        matches.sort(utils.sortByPriorityConversion);\n        // 置換\n        this.replaceByMatchPattern(word, matches);\n        return this.convertedWord;\n    }\n}\nexports.AdditionalConverter = AdditionalConverter;\n\n\n//# sourceURL=webpack://alkana/./src/converters/AdditionalConverter.ts?");

/***/ }),

/***/ "./src/converters/BaseConverter.ts":
/*!*****************************************!*\
  !*** ./src/converters/BaseConverter.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseConverter = void 0;\nconst utils = __importStar(__webpack_require__(/*! ../utils */ \"./src/utils/index.ts\"));\nclass BaseConverter {\n    constructor() {\n        this.convertedWord = \"\";\n    }\n    /**\n     * 名前付きグループ化して返却する\n     * @param pattern\n     * @returns\n     */\n    createPattern(pattern) {\n        const grouping = (name, value) => `(?<${name}>${value !== null && value !== void 0 ? value : \"\"})`;\n        return `${grouping(\"prefix\", pattern.prefix)}${grouping(\"main\", pattern.main)}${grouping(\"suffix\", pattern.suffix)}`;\n    }\n    appendConvertedWord(value) {\n        this.convertedWord = `${this.convertedWord}${value}`;\n    }\n    /**\n     * 全ての一致パターン取得\n     * @param word\n     * @returns\n     */\n    getAllMatch(word) {\n        const findConversion = this.conversions\n            .flatMap(({ conversionPattern, afterConversion }) => {\n            const pattern = this.createPattern(conversionPattern);\n            const matches = utils.matchAllAtIgnoreCase(pattern, word);\n            return utils.convertToMatchResult(matches, pattern, afterConversion);\n        })\n            .filter(utils.nonNullable);\n        return utils.filterUniqueMatchPattern(findConversion);\n    }\n    replaceByMatchPattern(word, matches) {\n        this.convertedWord = word;\n        matches.forEach((conversion) => {\n            // 置換\n            // $1=prefix, $2=main, $3=suffix\n            this.convertedWord = this.convertedWord.replace(RegExp(conversion.pattern, \"ig\"), `$<prefix>${conversion.afterConversion}$<suffix>`);\n        });\n    }\n    /**\n     * この関数を上書きして実装する\n     * TODO: 本当に必要か再検討\n     * @param word\n     * @returns\n     */\n    convert(word) {\n        this.convertedWord = \"\";\n        return this.convertedWord;\n    }\n}\nexports.BaseConverter = BaseConverter;\n\n\n//# sourceURL=webpack://alkana/./src/converters/BaseConverter.ts?");

/***/ }),

/***/ "./src/converters/CharacterToKanaConverter.ts":
/*!****************************************************!*\
  !*** ./src/converters/CharacterToKanaConverter.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CharacterToKanaConverter = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./src/converters/index.ts\");\nconst types = __importStar(__webpack_require__(/*! ../types */ \"./src/types/index.ts\"));\n/**\n * 英文字をカナに変換する\n */\nclass CharacterToKanaConverter extends _1.BaseConverter {\n    get conversions() {\n        return types.CharacterToKanaConversions;\n    }\n    convert(word) {\n        super.convert(word);\n        this.convertedWord = word;\n        const regExp = new RegExp(types.AlphabetPattern, \"ig\");\n        let match = null;\n        while ((match = regExp.exec(word)) != null) {\n            // 変換範囲を抽出\n            const matchValue = match[0];\n            // 変換表から抽出\n            const conversion = this.conversions.find(({ conversionPattern }) => conversionPattern.main === matchValue);\n            if (conversion == null) {\n                continue;\n            }\n            this.convertedWord = this.convertedWord.replace(RegExp(matchValue, \"ig\"), `${conversion.afterConversion}`);\n        }\n        return this.convertedWord;\n    }\n}\nexports.CharacterToKanaConverter = CharacterToKanaConverter;\n\n\n//# sourceURL=webpack://alkana/./src/converters/CharacterToKanaConverter.ts?");

/***/ }),

/***/ "./src/converters/NounToKanaConverter.ts":
/*!***********************************************!*\
  !*** ./src/converters/NounToKanaConverter.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NounToKanaConverter = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./src/converters/index.ts\");\nconst types = __importStar(__webpack_require__(/*! ../types */ \"./src/types/index.ts\"));\nconst utils = __importStar(__webpack_require__(/*! ../utils */ \"./src/utils/index.ts\"));\nclass NounToKanaConverter extends _1.BaseConverter {\n    get conversions() {\n        return types.NounToKanaConversions;\n    }\n    convert(word) {\n        super.convert(word);\n        // 全ての一致するパターン取得\n        const matches = this.getAllMatch(word);\n        // 変換優先順にソート\n        matches.sort(utils.sortByPriorityConversion);\n        // 置換\n        this.replaceByMatchPattern(word, matches);\n        return this.convertedWord;\n    }\n}\nexports.NounToKanaConverter = NounToKanaConverter;\n\n\n//# sourceURL=webpack://alkana/./src/converters/NounToKanaConverter.ts?");

/***/ }),

/***/ "./src/converters/NumberToKanaConverter.ts":
/*!*************************************************!*\
  !*** ./src/converters/NumberToKanaConverter.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NumberToKanaConverter = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./src/converters/index.ts\");\nconst types = __importStar(__webpack_require__(/*! ../types */ \"./src/types/index.ts\"));\n/**\n * 数字をカナに変換する\n */\nclass NumberToKanaConverter extends _1.BaseConverter {\n    get conversions() {\n        return types.NumberToKanaConversions;\n    }\n    /**\n     * 文字と見なされる場合1文字ずつ分解する\n     * @param word\n     * @returns\n     */\n    splitIfConsiderAsCharacter(word) {\n        // 変換最大桁数を超える場合\n        if (word.length > types.MAXConvertDigit) {\n            return [...word];\n        }\n        // 0で始まる場合\n        if (word.substring(0, 1) === \"0\") {\n            return [...word];\n        }\n        // 上記以外(分割しない)\n        return [word];\n    }\n    findConversion(value) {\n        return this.conversions.find(({ conversionPattern }) => conversionPattern.main === `${value}`);\n    }\n    addIfHasSpecifiedPlace(value, place, placeKana) {\n        const placeConversion = this.findConversion(Math.floor(value / place));\n        if (placeConversion == null) {\n            return false;\n        }\n        this.appendConvertedWord(placeConversion.afterConversion);\n        this.appendConvertedWord(placeKana);\n        return true;\n    }\n    getLessThan100Kana(value) {\n        var _a, _b, _c;\n        // 20以下の場合はマッチする単語を取得\n        if (value <= 20) {\n            const lessThan20Conversion = this.findConversion(value);\n            return (_a = lessThan20Conversion === null || lessThan20Conversion === void 0 ? void 0 : lessThan20Conversion.afterConversion) !== null && _a !== void 0 ? _a : \"\";\n        }\n        // 20を超える場合は10の位、1の位毎に単語を取得\n        const place10Conversion = this.findConversion(Math.floor(value / 10) * 10);\n        const place1Conversion = this.findConversion(value % 10);\n        return `${(_b = place10Conversion === null || place10Conversion === void 0 ? void 0 : place10Conversion.afterConversion) !== null && _b !== void 0 ? _b : \"\"}${(_c = place1Conversion === null || place1Conversion === void 0 ? void 0 : place1Conversion.afterConversion) !== null && _c !== void 0 ? _c : \"\"}`;\n    }\n    convert(word) {\n        super.convert(word);\n        const words = this.splitIfConsiderAsCharacter(word);\n        words.forEach((value) => {\n            const numberWord = Number(value);\n            // 0のみの場合\n            if (numberWord === 0) {\n                this.appendConvertedWord(types.ZeroKana);\n                return;\n            }\n            const lessThan100 = numberWord % 100;\n            // 1000の位\n            const isAddThousand = this.addIfHasSpecifiedPlace(numberWord, 1000, types.ThousandKana);\n            // 100の位\n            const isAddHundred = this.addIfHasSpecifiedPlace(numberWord % 1000, 100, types.HundredKana);\n            // 100未満\n            const lessThan100Kana = this.getLessThan100Kana(lessThan100);\n            const hasMoreThan100 = isAddThousand || isAddHundred;\n            if (lessThan100Kana.length !== 0) {\n                if (hasMoreThan100 === true) {\n                    this.appendConvertedWord(types.HundredSeparator);\n                }\n                this.appendConvertedWord(lessThan100Kana);\n            }\n        });\n        return this.convertedWord;\n    }\n}\nexports.NumberToKanaConverter = NumberToKanaConverter;\n\n\n//# sourceURL=webpack://alkana/./src/converters/NumberToKanaConverter.ts?");

/***/ }),

/***/ "./src/converters/RomaToKanaConverter.ts":
/*!***********************************************!*\
  !*** ./src/converters/RomaToKanaConverter.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RomaToKanaConverter = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./src/converters/index.ts\");\nconst types = __importStar(__webpack_require__(/*! ../types */ \"./src/types/index.ts\"));\n/**\n * ローマ字からカナに変換する\n */\nclass RomaToKanaConverter extends _1.BaseConverter {\n    get conversions() {\n        return types.RomaToKanaConversions;\n    }\n    replaceSmallWord(value) {\n        const smallMatch = value\n            .substring(0, 2)\n            .match(new RegExp(types.SmallPattern));\n        if (smallMatch == null) {\n            return value;\n        }\n        // 置換文字と結合\n        this.appendConvertedWord(\"ッ\");\n        return value.substring(1);\n    }\n    findConversion(value) {\n        // 通常の比較\n        const conversion = this.conversions.find((conversion) => conversion.conversionPattern.main === value);\n        if (conversion != null) {\n            return conversion;\n        }\n        // kpiのような存在しないパターンが取得されている可能性がある\n        // 2文字目以降と比較\n        const sub1Conversion = this.conversions.find((conversion) => conversion.conversionPattern.main === value.substring(1));\n        // 1文字目を英字のまま追加\n        if (sub1Conversion != null) {\n            this.appendConvertedWord(value.substring(0, 1));\n        }\n        return sub1Conversion;\n    }\n    convert(word) {\n        super.convert(word);\n        let replaceStartIndex = 0;\n        const regExp = new RegExp(types.RomaPattern, \"ig\");\n        let match = null;\n        while ((match = regExp.exec(word)) != null) {\n            // マッチする以前の文字を結合\n            if (replaceStartIndex !== match.index) {\n                this.appendConvertedWord(word.substring(replaceStartIndex, match.index));\n                // 変換範囲を保存\n                replaceStartIndex += match.index - replaceStartIndex;\n            }\n            // 変換範囲を抽出\n            let replaceRange = match[0];\n            // 変換範囲を保存\n            replaceStartIndex += replaceRange.length;\n            // TODO: 小書き置換\n            replaceRange = this.replaceSmallWord(replaceRange);\n            // 置換\n            const conversion = this.findConversion(replaceRange);\n            // 結合\n            if (conversion == null) {\n                this.appendConvertedWord(replaceRange);\n            }\n            else {\n                this.appendConvertedWord(conversion.afterConversion);\n            }\n        }\n        // 残った文字を結合\n        this.appendConvertedWord(word.substring(replaceStartIndex));\n        return this.convertedWord;\n    }\n}\nexports.RomaToKanaConverter = RomaToKanaConverter;\n\n\n//# sourceURL=webpack://alkana/./src/converters/RomaToKanaConverter.ts?");

/***/ }),

/***/ "./src/converters/WordToRomaConverter.ts":
/*!***********************************************!*\
  !*** ./src/converters/WordToRomaConverter.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WordToRomaConverter = void 0;\nconst _1 = __webpack_require__(/*! . */ \"./src/converters/index.ts\");\nconst types = __importStar(__webpack_require__(/*! ../types */ \"./src/types/index.ts\"));\nconst utils = __importStar(__webpack_require__(/*! ../utils */ \"./src/utils/index.ts\"));\n/**\n * 英単語をローマ字に変換する\n */\nclass WordToRomaConverter extends _1.BaseConverter {\n    get conversions() {\n        return types.WordToRomaConversions;\n    }\n    convert(word) {\n        super.convert(word);\n        // 全ての一致するパターン取得\n        const matches = this.getAllMatch(word);\n        // 変換優先順にソート\n        matches.sort(utils.sortByPriorityConversion);\n        // 置換\n        this.replaceByMatchPattern(word, matches);\n        return this.convertedWord;\n    }\n}\nexports.WordToRomaConverter = WordToRomaConverter;\n\n\n//# sourceURL=webpack://alkana/./src/converters/WordToRomaConverter.ts?");

/***/ }),

/***/ "./src/converters/index.ts":
/*!*********************************!*\
  !*** ./src/converters/index.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./BaseConverter */ \"./src/converters/BaseConverter.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./WordToRomaConverter */ \"./src/converters/WordToRomaConverter.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./CharacterToKanaConverter */ \"./src/converters/CharacterToKanaConverter.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./RomaToKanaConverter */ \"./src/converters/RomaToKanaConverter.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./NumberToKanaConverter */ \"./src/converters/NumberToKanaConverter.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./NounToKanaConverter */ \"./src/converters/NounToKanaConverter.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./AdditionalConverter */ \"./src/converters/AdditionalConverter.ts\"), exports);\n\n\n//# sourceURL=webpack://alkana/./src/converters/index.ts?");

/***/ }),

/***/ "./src/page/MainPageManager.ts":
/*!*************************************!*\
  !*** ./src/page/MainPageManager.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MainPageManager = void 0;\nconst FluffyConverter_1 = __webpack_require__(/*! ../FluffyConverter */ \"./src/FluffyConverter.ts\");\nconst utils = __importStar(__webpack_require__(/*! ../utils */ \"./src/utils/index.ts\"));\nclass MainPageManager {\n    getElement(query) {\n        return utils.qsStrict(document, query);\n    }\n    createLiByResult(word, kana) {\n        console.log(`${word}: ${kana}`);\n        const li = document.createElement(\"li\");\n        li.classList.add(\"row\");\n        const addPToLi = (value, colClass) => {\n            const pElement = document.createElement(\"p\");\n            pElement.classList.add(colClass !== null && colClass !== void 0 ? colClass : \"col\");\n            pElement.classList.add(\"text-break\");\n            pElement.innerHTML = value;\n            li.appendChild(pElement);\n        };\n        addPToLi(word, \"col-3\");\n        addPToLi(kana, \"col-7\");\n        return li;\n    }\n    getAdditionalConversions() {\n        const additionalConversions = this.getElement(\"#additionalConversions\");\n        const formatValues = additionalConversions.value\n            .split(\"\\n\")\n            .map((row) => row.split(\",\").map((value) => value.trim()));\n        return formatValues\n            .filter((columns) => {\n            if (columns.length !== 2) {\n                return false;\n            }\n            return columns.every((value) => value.length !== 0);\n        })\n            .map((value) => ({\n            word: value[0],\n            kana: value[1],\n        }));\n    }\n    execConvert() {\n        const isConvertNumbers = this.getElement(\"#isConvertNumbers\");\n        const converter = new FluffyConverter_1.FluffyConverter(isConvertNumbers.checked, this.getAdditionalConversions());\n        const convertList = this.getElement(\".convert-list\");\n        convertList.innerHTML = \"\";\n        const englishWords = this.getElement(\"#englishWords\");\n        const words = englishWords.value.split(\"\\n\");\n        words.forEach((word) => {\n            const kana = converter.convert(word);\n            convertList.appendChild(this.createLiByResult(word, kana));\n        });\n    }\n    init() {\n        const additionalConversions = this.getElement(\"#additionalConversions\");\n        additionalConversions.placeholder = [\n            \"(例)\",\n            \"test,テスト\",\n            \"ww,ワラワラ\",\n        ].join(\"\\n\");\n        const execButton = this.getElement(\"#execConvert\");\n        execButton.addEventListener(\"click\", this.execConvert.bind(this));\n    }\n}\nexports.MainPageManager = MainPageManager;\n\n\n//# sourceURL=webpack://alkana/./src/page/MainPageManager.ts?");

/***/ }),

/***/ "./src/types/conversions/characterToKana.ts":
/*!**************************************************!*\
  !*** ./src/types/conversions/characterToKana.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CharacterToKanaConversions = void 0;\nexports.CharacterToKanaConversions = [\n    { conversionPattern: { main: \"a\" }, afterConversion: \"エー\" },\n    { conversionPattern: { main: \"b\" }, afterConversion: \"ビー\" },\n    { conversionPattern: { main: \"c\" }, afterConversion: \"シー\" },\n    { conversionPattern: { main: \"d\" }, afterConversion: \"ディー\" },\n    { conversionPattern: { main: \"e\" }, afterConversion: \"イー\" },\n    { conversionPattern: { main: \"f\" }, afterConversion: \"エフ\" },\n    { conversionPattern: { main: \"g\" }, afterConversion: \"ジー\" },\n    { conversionPattern: { main: \"h\" }, afterConversion: \"エイチ\" },\n    { conversionPattern: { main: \"i\" }, afterConversion: \"アイ\" },\n    { conversionPattern: { main: \"j\" }, afterConversion: \"ジェイ\" },\n    { conversionPattern: { main: \"k\" }, afterConversion: \"ケー\" },\n    { conversionPattern: { main: \"l\" }, afterConversion: \"エル\" },\n    { conversionPattern: { main: \"m\" }, afterConversion: \"エム\" },\n    { conversionPattern: { main: \"n\" }, afterConversion: \"エヌ\" },\n    { conversionPattern: { main: \"o\" }, afterConversion: \"オー\" },\n    { conversionPattern: { main: \"p\" }, afterConversion: \"ピー\" },\n    { conversionPattern: { main: \"q\" }, afterConversion: \"キュー\" },\n    { conversionPattern: { main: \"r\" }, afterConversion: \"アール\" },\n    { conversionPattern: { main: \"s\" }, afterConversion: \"エス\" },\n    { conversionPattern: { main: \"t\" }, afterConversion: \"ティー\" },\n    { conversionPattern: { main: \"u\" }, afterConversion: \"ユー\" },\n    { conversionPattern: { main: \"v\" }, afterConversion: \"ヴイー\" },\n    { conversionPattern: { main: \"w\" }, afterConversion: \"ダブル\" },\n    { conversionPattern: { main: \"x\" }, afterConversion: \"エックス\" },\n    { conversionPattern: { main: \"y\" }, afterConversion: \"ワイ\" },\n    { conversionPattern: { main: \"z\" }, afterConversion: \"ゼット\" },\n];\n\n\n//# sourceURL=webpack://alkana/./src/types/conversions/characterToKana.ts?");

/***/ }),

/***/ "./src/types/conversions/conversion.ts":
/*!*********************************************!*\
  !*** ./src/types/conversions/conversion.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n\n//# sourceURL=webpack://alkana/./src/types/conversions/conversion.ts?");

/***/ }),

/***/ "./src/types/conversions/index.ts":
/*!****************************************!*\
  !*** ./src/types/conversions/index.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./conversion */ \"./src/types/conversions/conversion.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./romaToKana */ \"./src/types/conversions/romaToKana.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./wordToRoma */ \"./src/types/conversions/wordToRoma.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./characterToKana */ \"./src/types/conversions/characterToKana.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./numberToKana */ \"./src/types/conversions/numberToKana.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./nounToKana */ \"./src/types/conversions/nounToKana.ts\"), exports);\n\n\n//# sourceURL=webpack://alkana/./src/types/conversions/index.ts?");

/***/ }),

/***/ "./src/types/conversions/nounToKana.ts":
/*!*********************************************!*\
  !*** ./src/types/conversions/nounToKana.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NounToKanaConversions = void 0;\nexports.NounToKanaConversions = [\n    {\n        conversionPattern: {\n            main: \"eleven\",\n        },\n        afterConversion: \"イレブン\",\n    },\n    {\n        conversionPattern: {\n            main: `nineteen`,\n        },\n        afterConversion: `ナインティーン`,\n    },\n];\n\n\n//# sourceURL=webpack://alkana/./src/types/conversions/nounToKana.ts?");

/***/ }),

/***/ "./src/types/conversions/numberToKana.ts":
/*!***********************************************!*\
  !*** ./src/types/conversions/numberToKana.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MAXConvertDigit = exports.ZeroKana = exports.HundredSeparator = exports.ThousandKana = exports.HundredKana = exports.NumberToKanaConversions = void 0;\nexports.NumberToKanaConversions = [\n    { conversionPattern: { main: `1` }, afterConversion: `ワン` },\n    { conversionPattern: { main: `2` }, afterConversion: `ツー` },\n    { conversionPattern: { main: `3` }, afterConversion: `スリー` },\n    { conversionPattern: { main: `4` }, afterConversion: `フォー` },\n    { conversionPattern: { main: `5` }, afterConversion: `ファイブ` },\n    { conversionPattern: { main: `6` }, afterConversion: `シックス` },\n    { conversionPattern: { main: `7` }, afterConversion: `セブン` },\n    { conversionPattern: { main: `8` }, afterConversion: `エイト` },\n    { conversionPattern: { main: `9` }, afterConversion: `ナイン` },\n    { conversionPattern: { main: `10` }, afterConversion: `テン` },\n    { conversionPattern: { main: `11` }, afterConversion: `イレブン` },\n    { conversionPattern: { main: `12` }, afterConversion: `トゥエルブ` },\n    { conversionPattern: { main: `13` }, afterConversion: `サーティーン` },\n    { conversionPattern: { main: `14` }, afterConversion: `フォーティーン` },\n    { conversionPattern: { main: `15` }, afterConversion: `フィフティーン` },\n    { conversionPattern: { main: `16` }, afterConversion: `シックスティーン` },\n    { conversionPattern: { main: `17` }, afterConversion: `セブンティーン` },\n    { conversionPattern: { main: `18` }, afterConversion: `エイティーン` },\n    { conversionPattern: { main: `19` }, afterConversion: `ナインティーン` },\n    { conversionPattern: { main: `20` }, afterConversion: `トゥエンティ` },\n    { conversionPattern: { main: `30` }, afterConversion: `サーティ` },\n    { conversionPattern: { main: `40` }, afterConversion: `フォーティ` },\n    { conversionPattern: { main: `50` }, afterConversion: `フィフティ` },\n    { conversionPattern: { main: `60` }, afterConversion: `シックスティ` },\n    { conversionPattern: { main: `70` }, afterConversion: `セブンティ` },\n    { conversionPattern: { main: `80` }, afterConversion: `エイティ` },\n    { conversionPattern: { main: `90` }, afterConversion: `ナインティ` },\n];\nexports.HundredKana = \"ハンドレッド\";\nexports.ThousandKana = \"サウザンド\";\nexports.HundredSeparator = \"アンド\";\nexports.ZeroKana = \"ゼロ\";\nexports.MAXConvertDigit = 4;\n\n\n//# sourceURL=webpack://alkana/./src/types/conversions/numberToKana.ts?");

/***/ }),

/***/ "./src/types/conversions/romaToKana.ts":
/*!*********************************************!*\
  !*** ./src/types/conversions/romaToKana.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SmallPattern = exports.RomaToKanaConversions = void 0;\nexports.RomaToKanaConversions = [\n    { conversionPattern: { main: \"a\" }, afterConversion: \"ア\" },\n    { conversionPattern: { main: \"i\" }, afterConversion: \"イ\" },\n    { conversionPattern: { main: \"u\" }, afterConversion: \"ウ\" },\n    { conversionPattern: { main: \"e\" }, afterConversion: \"エ\" },\n    { conversionPattern: { main: \"o\" }, afterConversion: \"オ\" },\n    { conversionPattern: { main: \"ka\" }, afterConversion: \"カ\" },\n    { conversionPattern: { main: \"ki\" }, afterConversion: \"キ\" },\n    { conversionPattern: { main: \"ku\" }, afterConversion: \"ク\" },\n    { conversionPattern: { main: \"ke\" }, afterConversion: \"ケ\" },\n    { conversionPattern: { main: \"ko\" }, afterConversion: \"コ\" },\n    { conversionPattern: { main: \"sa\" }, afterConversion: \"サ\" },\n    { conversionPattern: { main: \"si\" }, afterConversion: \"シ\" },\n    { conversionPattern: { main: \"su\" }, afterConversion: \"ス\" },\n    { conversionPattern: { main: \"se\" }, afterConversion: \"セ\" },\n    { conversionPattern: { main: \"so\" }, afterConversion: \"ソ\" },\n    { conversionPattern: { main: \"ta\" }, afterConversion: \"タ\" },\n    { conversionPattern: { main: \"ti\" }, afterConversion: \"チ\" },\n    { conversionPattern: { main: \"tu\" }, afterConversion: \"ツ\" },\n    { conversionPattern: { main: \"te\" }, afterConversion: \"テ\" },\n    { conversionPattern: { main: \"to\" }, afterConversion: \"ト\" },\n    { conversionPattern: { main: \"na\" }, afterConversion: \"ナ\" },\n    { conversionPattern: { main: \"ni\" }, afterConversion: \"ニ\" },\n    { conversionPattern: { main: \"nu\" }, afterConversion: \"ヌ\" },\n    { conversionPattern: { main: \"ne\" }, afterConversion: \"ネ\" },\n    { conversionPattern: { main: \"no\" }, afterConversion: \"ノ\" },\n    { conversionPattern: { main: \"ha\" }, afterConversion: \"ハ\" },\n    { conversionPattern: { main: \"hi\" }, afterConversion: \"ヒ\" },\n    { conversionPattern: { main: \"hu\" }, afterConversion: \"フ\" },\n    { conversionPattern: { main: \"he\" }, afterConversion: \"ヘ\" },\n    { conversionPattern: { main: \"ho\" }, afterConversion: \"ホ\" },\n    { conversionPattern: { main: \"ma\" }, afterConversion: \"マ\" },\n    { conversionPattern: { main: \"mi\" }, afterConversion: \"ミ\" },\n    { conversionPattern: { main: \"mu\" }, afterConversion: \"ム\" },\n    { conversionPattern: { main: \"me\" }, afterConversion: \"メ\" },\n    { conversionPattern: { main: \"mo\" }, afterConversion: \"モ\" },\n    { conversionPattern: { main: \"ya\" }, afterConversion: \"ヤ\" },\n    { conversionPattern: { main: \"yu\" }, afterConversion: \"ユ\" },\n    { conversionPattern: { main: \"ye\" }, afterConversion: \"イェ\" },\n    { conversionPattern: { main: \"yo\" }, afterConversion: \"ヨ\" },\n    { conversionPattern: { main: \"ra\" }, afterConversion: \"ラ\" },\n    { conversionPattern: { main: \"ri\" }, afterConversion: \"リ\" },\n    { conversionPattern: { main: \"ru\" }, afterConversion: \"ル\" },\n    { conversionPattern: { main: \"re\" }, afterConversion: \"レ\" },\n    { conversionPattern: { main: \"ro\" }, afterConversion: \"ロ\" },\n    { conversionPattern: { main: \"wa\" }, afterConversion: \"ワ\" },\n    { conversionPattern: { main: \"wi\" }, afterConversion: \"ウィ\" },\n    { conversionPattern: { main: \"n\" }, afterConversion: \"ン\" },\n    { conversionPattern: { main: \"ga\" }, afterConversion: \"ガ\" },\n    { conversionPattern: { main: \"gi\" }, afterConversion: \"ギ\" },\n    { conversionPattern: { main: \"gu\" }, afterConversion: \"グ\" },\n    { conversionPattern: { main: \"ge\" }, afterConversion: \"ゲ\" },\n    { conversionPattern: { main: \"go\" }, afterConversion: \"ゴ\" },\n    { conversionPattern: { main: \"za\" }, afterConversion: \"ザ\" },\n    { conversionPattern: { main: \"zi\" }, afterConversion: \"ジ\" },\n    { conversionPattern: { main: \"zu\" }, afterConversion: \"ズ\" },\n    { conversionPattern: { main: \"ze\" }, afterConversion: \"ゼ\" },\n    { conversionPattern: { main: \"zo\" }, afterConversion: \"ゾ\" },\n    { conversionPattern: { main: \"da\" }, afterConversion: \"ダ\" },\n    { conversionPattern: { main: \"di\" }, afterConversion: \"ヂ\" },\n    { conversionPattern: { main: \"du\" }, afterConversion: \"ヅ\" },\n    { conversionPattern: { main: \"de\" }, afterConversion: \"デ\" },\n    { conversionPattern: { main: \"do\" }, afterConversion: \"ド\" },\n    { conversionPattern: { main: \"ba\" }, afterConversion: \"バ\" },\n    { conversionPattern: { main: \"bi\" }, afterConversion: \"ビ\" },\n    { conversionPattern: { main: \"bu\" }, afterConversion: \"ブ\" },\n    { conversionPattern: { main: \"be\" }, afterConversion: \"ベ\" },\n    { conversionPattern: { main: \"bo\" }, afterConversion: \"ボ\" },\n    { conversionPattern: { main: \"pa\" }, afterConversion: \"パ\" },\n    { conversionPattern: { main: \"pi\" }, afterConversion: \"ピ\" },\n    { conversionPattern: { main: \"pu\" }, afterConversion: \"プ\" },\n    { conversionPattern: { main: \"pe\" }, afterConversion: \"ペ\" },\n    { conversionPattern: { main: \"po\" }, afterConversion: \"ポ\" },\n    { conversionPattern: { main: \"fa\" }, afterConversion: \"ファ\" },\n    { conversionPattern: { main: \"fi\" }, afterConversion: \"フィ\" },\n    { conversionPattern: { main: `fu` }, afterConversion: `フ` },\n    { conversionPattern: { main: \"fe\" }, afterConversion: \"フェ\" },\n    { conversionPattern: { main: \"fo\" }, afterConversion: \"フォ\" },\n    { conversionPattern: { main: \"kya\" }, afterConversion: \"キャ\" },\n    { conversionPattern: { main: \"kyu\" }, afterConversion: \"キュ\" },\n    { conversionPattern: { main: \"kyo\" }, afterConversion: \"キョ\" },\n    { conversionPattern: { main: \"sha\" }, afterConversion: \"シャ\" },\n    { conversionPattern: { main: `shi` }, afterConversion: `シ` },\n    { conversionPattern: { main: \"shu\" }, afterConversion: \"シュ\" },\n    { conversionPattern: { main: \"sho\" }, afterConversion: \"ショ\" },\n    { conversionPattern: { main: `sya` }, afterConversion: `シャ` },\n    { conversionPattern: { main: `syu` }, afterConversion: `シュ` },\n    { conversionPattern: { main: `syo` }, afterConversion: `ショ` },\n    { conversionPattern: { main: \"cha\" }, afterConversion: \"チャ\" },\n    { conversionPattern: { main: `chi` }, afterConversion: `チ` },\n    { conversionPattern: { main: `chu` }, afterConversion: `チュ` },\n    { conversionPattern: { main: `che` }, afterConversion: `チェ` },\n    { conversionPattern: { main: \"cho\" }, afterConversion: \"チョ\" },\n    { conversionPattern: { main: `tya` }, afterConversion: `チャ` },\n    { conversionPattern: { main: `tyu` }, afterConversion: `チュ` },\n    { conversionPattern: { main: `tyo` }, afterConversion: `チョ` },\n    { conversionPattern: { main: \"nya\" }, afterConversion: \"ニャ\" },\n    { conversionPattern: { main: \"nyu\" }, afterConversion: \"ニュ\" },\n    { conversionPattern: { main: \"nyo\" }, afterConversion: \"ニョ\" },\n    { conversionPattern: { main: \"hya\" }, afterConversion: \"ヒャ\" },\n    { conversionPattern: { main: \"hyu\" }, afterConversion: \"ヒュ\" },\n    { conversionPattern: { main: \"hyo\" }, afterConversion: \"ヒョ\" },\n    { conversionPattern: { main: \"mya\" }, afterConversion: \"ミャ\" },\n    { conversionPattern: { main: \"myu\" }, afterConversion: \"ミュ\" },\n    { conversionPattern: { main: \"myo\" }, afterConversion: \"ミョ\" },\n    { conversionPattern: { main: \"rya\" }, afterConversion: \"リャ\" },\n    { conversionPattern: { main: \"ryu\" }, afterConversion: \"リュ\" },\n    { conversionPattern: { main: \"ryo\" }, afterConversion: \"リョ\" },\n    { conversionPattern: { main: \"gya\" }, afterConversion: \"ギャ\" },\n    { conversionPattern: { main: \"gyu\" }, afterConversion: \"ギュ\" },\n    { conversionPattern: { main: \"gyo\" }, afterConversion: \"ギョ\" },\n    { conversionPattern: { main: \"ja\" }, afterConversion: \"ジャ\" },\n    { conversionPattern: { main: `ji` }, afterConversion: `ジ` },\n    { conversionPattern: { main: \"ju\" }, afterConversion: \"ジュ\" },\n    { conversionPattern: { main: \"jo\" }, afterConversion: \"ジョ\" },\n    { conversionPattern: { main: `zya` }, afterConversion: `ジャ` },\n    { conversionPattern: { main: `zyu` }, afterConversion: `ジュ` },\n    { conversionPattern: { main: `zyo` }, afterConversion: `ジョ` },\n    { conversionPattern: { main: \"dya\" }, afterConversion: \"ヂャ\" },\n    { conversionPattern: { main: \"dyu\" }, afterConversion: \"ヂュ\" },\n    { conversionPattern: { main: \"dyo\" }, afterConversion: \"ヂョ\" },\n    { conversionPattern: { main: \"bya\" }, afterConversion: \"ビャ\" },\n    { conversionPattern: { main: \"byu\" }, afterConversion: \"ビュ\" },\n    { conversionPattern: { main: \"byo\" }, afterConversion: \"ビョ\" },\n    { conversionPattern: { main: \"pya\" }, afterConversion: \"ピャ\" },\n    { conversionPattern: { main: \"pyu\" }, afterConversion: \"ピュ\" },\n    { conversionPattern: { main: \"pyo\" }, afterConversion: \"ピョ\" },\n    { conversionPattern: { main: \"va\" }, afterConversion: \"ヴァ\" },\n    { conversionPattern: { main: `vi` }, afterConversion: `ヴィ` },\n    { conversionPattern: { main: `vo` }, afterConversion: `ヴォ` },\n    { conversionPattern: { main: \"-\" }, afterConversion: \"ー\" },\n    { conversionPattern: { main: `dhi` }, afterConversion: `ディ` },\n    { conversionPattern: { main: `dhu` }, afterConversion: `デュ` },\n    { conversionPattern: { main: `thi` }, afterConversion: `ティ` },\n    { conversionPattern: { main: `twu` }, afterConversion: `トゥ` },\n    { conversionPattern: { main: `tsu` }, afterConversion: `ツ` },\n];\nexports.SmallPattern = \"(.)\\\\1\";\n\n\n//# sourceURL=webpack://alkana/./src/types/conversions/romaToKana.ts?");

/***/ }),

/***/ "./src/types/conversions/wordToRoma.ts":
/*!*********************************************!*\
  !*** ./src/types/conversions/wordToRoma.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WordToRomaConversions = void 0;\nconst wordPattern_1 = __webpack_require__(/*! ../wordPattern */ \"./src/types/wordPattern.ts\");\nexports.WordToRomaConversions = [\n    {\n        conversionPattern: { prefix: `${wordPattern_1.Vowel}`, main: `t`, suffix: `$` },\n        afterConversion: `tto`,\n    },\n    {\n        conversionPattern: { main: `m`, suffix: `$` },\n        afterConversion: `mu`,\n    },\n    {\n        conversionPattern: { prefix: wordPattern_1.Vowel, main: \"p\" },\n        afterConversion: \"ppu\",\n    },\n    {\n        conversionPattern: { main: \"cu\", suffix: \"p\" },\n        afterConversion: \"ka\",\n    },\n    { conversionPattern: { main: \"c\", suffix: \"a\" }, afterConversion: \"k\" },\n    { conversionPattern: { main: \"ca\", suffix: \"p\" }, afterConversion: \"kya\" },\n    {\n        conversionPattern: { main: `ar`, suffix: `[^aiueo]|$` },\n        afterConversion: `a-`,\n    },\n    { conversionPattern: { main: \"cau\" }, afterConversion: \"kou\" },\n    { conversionPattern: { main: \"tio\" }, afterConversion: \"sho\" },\n    {\n        conversionPattern: {\n            prefix: `${wordPattern_1.Vowel}`,\n            main: `g`,\n            suffix: `${wordPattern_1.Consonant}|$`,\n        },\n        afterConversion: `gu`,\n    },\n    { conversionPattern: { main: `mu`, suffix: `g` }, afterConversion: `ma` },\n    {\n        conversionPattern: {\n            prefix: wordPattern_1.Vowel,\n            main: \"m\",\n            suffix: \"b\",\n        },\n        afterConversion: \"n\",\n    },\n    {\n        conversionPattern: {\n            prefix: `${wordPattern_1.Consonant}`,\n            main: `ur`,\n            suffix: `${wordPattern_1.Consonant}`,\n        },\n        afterConversion: `a-`,\n    },\n    {\n        conversionPattern: { prefix: `[^z]`, main: `er` },\n        afterConversion: `a-`,\n    },\n    { conversionPattern: { main: `sh`, suffix: `[ie]` }, afterConversion: `s` },\n    {\n        conversionPattern: { main: `ie`, suffix: `(l.)|$` },\n        afterConversion: `i-`,\n    },\n    {\n        conversionPattern: { main: `l`, suffix: `[^aiueo]` },\n        afterConversion: `ru`,\n    },\n    { conversionPattern: { main: \"or\" }, afterConversion: \"o-\" },\n    {\n        conversionPattern: {\n            prefix: `${wordPattern_1.Vowel}|[r\\-]`,\n            main: `se`,\n            suffix: `[^lp]?`,\n        },\n        afterConversion: `su`,\n    },\n    { conversionPattern: { main: \"oor\" }, afterConversion: \"oa\" },\n    { conversionPattern: { main: \"ir\" }, afterConversion: \"a-\" },\n    {\n        conversionPattern: { main: `d`, suffix: `${wordPattern_1.Consonant}|$` },\n        afterConversion: `do`,\n    },\n    { conversionPattern: { main: \"oe\" }, afterConversion: \"u-\" },\n    { conversionPattern: { main: \"cu\" }, afterConversion: \"kyu-\" },\n    { conversionPattern: { prefix: `.+`, main: `be` }, afterConversion: `bu` },\n    {\n        conversionPattern: { prefix: wordPattern_1.Consonant, main: \"ay\" },\n        afterConversion: \"ei\",\n    },\n    { conversionPattern: { main: \"my\" }, afterConversion: \"mai\" },\n    { conversionPattern: { prefix: `b`, main: `oy` }, afterConversion: `o-i` },\n    {\n        conversionPattern: { main: `oy`, suffix: `${wordPattern_1.Consonant}?` },\n        afterConversion: `oi`,\n    },\n    { conversionPattern: { main: \"ey\" }, afterConversion: \"i-\" },\n    {\n        conversionPattern: { main: \"f\", suffix: wordPattern_1.Consonant },\n        afterConversion: \"hu\",\n    },\n    {\n        conversionPattern: { prefix: `[nr\\-]`, main: `t` },\n        afterConversion: `to`,\n    },\n    { conversionPattern: { main: \"lo\" }, afterConversion: \"ro\" },\n    { conversionPattern: { main: \"ck\" }, afterConversion: \"kku\" },\n    {\n        conversionPattern: {\n            prefix: `[^r\\-]`,\n            main: `s`,\n            suffix: `[^aiueohy]|$`,\n        },\n        afterConversion: `su`,\n    },\n    { conversionPattern: { prefix: wordPattern_1.Vowel, main: \"k\" }, afterConversion: \"ku\" },\n    // TODO: 再変換しない対応が必要そう\n    // イメージ\n    // afterConversion: {\n    //\t\tmain: auto, isNotReconvert?: boolean\n    // }\n    // 現時点では他に該当するパターンが無いため、outをaウトにすることで対応する\n    { conversionPattern: { main: \"out\" }, afterConversion: \"aウト\" },\n    { conversionPattern: { main: `ph` }, afterConversion: `f` },\n    {\n        conversionPattern: { prefix: `.+`, main: `ph`, suffix: `^${wordPattern_1.Vowel}` },\n        afterConversion: `hu`,\n    },\n    {\n        conversionPattern: { prefix: `${wordPattern_1.Vowel}`, main: `ne` },\n        afterConversion: `n`,\n    },\n    {\n        conversionPattern: { main: `no`, suffix: `[^nr]?` },\n        afterConversion: `no-`,\n    },\n    {\n        conversionPattern: { main: `not`, suffix: `${wordPattern_1.Consonant}?` },\n        afterConversion: `ノット`,\n    },\n    {\n        conversionPattern: { prefix: `${wordPattern_1.Vowel}|y`, main: `o`, suffix: `ne` },\n        afterConversion: `wa`,\n    },\n    {\n        conversionPattern: { prefix: `^`, main: `o`, suffix: `ne` },\n        afterConversion: `wa`,\n    },\n    { conversionPattern: { main: \"am\", suffix: \"b.\" }, afterConversion: \"an\" },\n    { conversionPattern: { main: `dy` }, afterConversion: `dhi` },\n    { conversionPattern: { main: `ny` }, afterConversion: `ni` },\n    { conversionPattern: { main: `ty` }, afterConversion: `ティ` },\n    {\n        conversionPattern: {\n            prefix: `.[r(ll)s]?`,\n            main: `y`,\n            suffix: `${wordPattern_1.Consonant}|$`,\n        },\n        afterConversion: `i-`,\n    },\n    { conversionPattern: { main: `l{1,2}` }, afterConversion: `r` },\n    { conversionPattern: { main: `know` }, afterConversion: `nou` },\n    { conversionPattern: { main: `kni` }, afterConversion: `nai` },\n    { conversionPattern: { main: `kni`, suffix: `tc` }, afterConversion: `ni` },\n    { conversionPattern: { main: `knee` }, afterConversion: `ni-` },\n    { conversionPattern: { main: `k`, suffix: `n` }, afterConversion: `n` },\n    { conversionPattern: { main: `knu` }, afterConversion: `na` },\n    {\n        conversionPattern: { prefix: `${wordPattern_1.Vowel}?`, main: `now` },\n        afterConversion: `nau`,\n    },\n    {\n        conversionPattern: { prefix: `(br)|c|(fl)|g`, main: `ow` },\n        afterConversion: `au`,\n    },\n    { conversionPattern: { main: `ow` }, afterConversion: `ou` },\n    { conversionPattern: { main: `i[eo]r` }, afterConversion: `ia` },\n    {\n        conversionPattern: { prefix: `.+`, main: `ce`, suffix: `$` },\n        afterConversion: `su`,\n    },\n    { conversionPattern: { main: `air` }, afterConversion: `ea` },\n    {\n        conversionPattern: { prefix: `[^f]`, main: `our` },\n        afterConversion: `awa-`,\n    },\n    { conversionPattern: { main: `tour` }, afterConversion: `tua-` },\n    { conversionPattern: { main: `th` }, afterConversion: `su` },\n    { conversionPattern: { main: `thi` }, afterConversion: `si` },\n    { conversionPattern: { main: `th`, suffix: `e` }, afterConversion: `z` },\n    {\n        conversionPattern: { prefix: `.+`, main: `k`, suffix: `$` },\n        afterConversion: `ku`,\n    },\n    { conversionPattern: { main: `the`, suffix: `$` }, afterConversion: `za` },\n    {\n        conversionPattern: { prefix: `.+`, main: `ght`, suffix: `[^e]|$` },\n        afterConversion: `to`,\n    },\n    {\n        conversionPattern: { prefix: `.+`, main: `ght`, suffix: `e` },\n        afterConversion: `t`,\n    },\n    { conversionPattern: { main: `ine` }, afterConversion: `ain` },\n    {\n        conversionPattern: { prefix: `f`, main: `i`, suffix: `v` },\n        afterConversion: `ai`,\n    },\n    { conversionPattern: { main: `love` }, afterConversion: `rabu` },\n    { conversionPattern: { main: `ve`, suffix: `$` }, afterConversion: `bu` },\n    { conversionPattern: { main: `vy` }, afterConversion: `vi-` },\n    { conversionPattern: { main: `ver` }, afterConversion: `ba-` },\n    {\n        conversionPattern: { prefix: `^`, main: `su`, suffix: `[nbr(pp)scml]` },\n        afterConversion: `sa`,\n    },\n    {\n        conversionPattern: { prefix: `(vi)|(ca)|u`, main: `su` },\n        afterConversion: `ju`,\n    },\n    {\n        conversionPattern: { prefix: `.+`, main: `al`, suffix: `$` },\n        afterConversion: `aru`,\n    },\n    { conversionPattern: { main: `two` }, afterConversion: `tu-` },\n    { conversionPattern: { main: `ds`, suffix: `$` }, afterConversion: `zu` },\n    {\n        conversionPattern: { main: `ids`, suffix: `$` },\n        afterConversion: `izzu`,\n    },\n    // 現時点で同様のパターンが無いため暫定対応する\n    { conversionPattern: { main: `oo`, suffix: `.` }, afterConversion: `uッ` },\n    {\n        conversionPattern: { prefix: `.`, main: `oo`, suffix: `$` },\n        afterConversion: `u-`,\n    },\n    { conversionPattern: { prefix: `.`, main: `ee` }, afterConversion: `i-` },\n    {\n        conversionPattern: { main: `tea`, suffix: `$` },\n        afterConversion: `ティ-`,\n    },\n    {\n        conversionPattern: { prefix: `f`, main: `i`, suffix: `[vgr]` },\n        afterConversion: `ai`,\n    },\n    {\n        conversionPattern: { prefix: `p`, main: `i`, suffix: `[^at]` },\n        afterConversion: `ai`,\n    },\n    {\n        conversionPattern: { prefix: `r`, main: `i`, suffix: `[ogtos]` },\n        afterConversion: `ai`,\n    },\n    {\n        conversionPattern: { prefix: `${wordPattern_1.Consonant}`, main: `ea` },\n        afterConversion: `i-`,\n    },\n    { conversionPattern: { main: `mb` }, afterConversion: `mu` },\n    { conversionPattern: { main: `ve`, suffix: `n.` }, afterConversion: `be` },\n    {\n        conversionPattern: { main: `seven`, suffix: `` },\n        afterConversion: `sebun`,\n    },\n    { conversionPattern: { main: `ger` }, afterConversion: `ja-` },\n    {\n        conversionPattern: { prefix: `[r\\-]`, main: `s`, suffix: `$` },\n        afterConversion: `zu`,\n    },\n    { conversionPattern: { main: `burger` }, afterConversion: `ba-ga-` },\n    { conversionPattern: { main: `singer` }, afterConversion: `singa-` },\n    { conversionPattern: { prefix: `f`, main: `our` }, afterConversion: `o-` },\n    {\n        conversionPattern: { main: `x`, suffix: `[^aiueo]|$` },\n        afterConversion: `ックス`,\n    },\n    { conversionPattern: { prefix: `.`, main: `xa` }, afterConversion: `kusa` },\n    { conversionPattern: { main: `hn`, suffix: `$` }, afterConversion: `n` },\n    { conversionPattern: { main: `ber` }, afterConversion: `ba-` },\n    {\n        conversionPattern: { main: `twe`, suffix: `[ln]` },\n        afterConversion: `twue`,\n    },\n    { conversionPattern: { main: `tee` }, afterConversion: `ティ-` },\n    { conversionPattern: { prefix: `a`, main: `h` }, afterConversion: `` },\n    { conversionPattern: { main: `ew` }, afterConversion: `yu-` },\n    {\n        conversionPattern: { prefix: ``, main: `w`, suffix: `${wordPattern_1.Consonant}|$` },\n        afterConversion: `u`,\n    },\n    { conversionPattern: { main: `tthew` }, afterConversion: `syu-` },\n    { conversionPattern: { main: `chl` }, afterConversion: `kur` },\n    { conversionPattern: { main: `chlo` }, afterConversion: `クロ` },\n    { conversionPattern: { main: `chri` }, afterConversion: `クリ` },\n    {\n        conversionPattern: { prefix: `.`, main: `sh`, suffix: `$` },\n        afterConversion: `ッsyu`,\n    },\n    {\n        conversionPattern: { prefix: `.`, main: `sh`, suffix: `${wordPattern_1.Consonant}` },\n        afterConversion: `syu`,\n    },\n    { conversionPattern: { main: `tte` }, afterConversion: `tto` },\n    {\n        conversionPattern: { main: `char`, suffix: `(lotte)|(lize)` },\n        afterConversion: `sha-`,\n    },\n    { conversionPattern: { main: `zha` }, afterConversion: `za` },\n    {\n        conversionPattern: { main: `tho`, suffix: `m[aiueo]` },\n        afterConversion: `to-`,\n    },\n    { conversionPattern: { main: `geor` }, afterConversion: `jo-` },\n    {\n        conversionPattern: {\n            prefix: `.`,\n            main: `ge`,\n            suffix: `${wordPattern_1.Consonant}|$`,\n        },\n        afterConversion: `ji`,\n    },\n    {\n        conversionPattern: { prefix: `.`, main: `gi`, suffix: `(a)|(na)` },\n        afterConversion: `ji`,\n    },\n    { conversionPattern: { main: `el` }, afterConversion: `eru` },\n];\n\n\n//# sourceURL=webpack://alkana/./src/types/conversions/wordToRoma.ts?");

/***/ }),

/***/ "./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./conversions */ \"./src/types/conversions/index.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./wordPattern */ \"./src/types/wordPattern.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./match */ \"./src/types/match.ts\"), exports);\n\n\n//# sourceURL=webpack://alkana/./src/types/index.ts?");

/***/ }),

/***/ "./src/types/match.ts":
/*!****************************!*\
  !*** ./src/types/match.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n\n//# sourceURL=webpack://alkana/./src/types/match.ts?");

/***/ }),

/***/ "./src/types/wordPattern.ts":
/*!**********************************!*\
  !*** ./src/types/wordPattern.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EnglishLength = exports.AlphabetPattern = exports.RomaPattern = exports.NPattern = exports.BaseRomaPattern = exports.Consonant = exports.Vowel = exports.VowelCharacter = void 0;\nexports.VowelCharacter = \"aiueo\";\n/**\n * 母音\n */\nexports.Vowel = `[${exports.VowelCharacter}]`;\n/**\n * 子音\n * ッも子音として扱う\n */\nexports.Consonant = `[b-df-hj-mp-tv-zッ]`;\nexports.BaseRomaPattern = `(${exports.Consonant}{1,2})?(${exports.Vowel}{1})`;\nexports.NPattern = `ny?${exports.Vowel}{1}|n`;\n/**\n * ローマ字パターン\n * - 子音0～2と母音 a、ki、hyaなど\n * - n、n行、ny行 ん、na、nyaなど\n * - \\- のばす音（例：トーク）\n */\nexports.RomaPattern = `(${exports.BaseRomaPattern})|(${exports.NPattern})|(?<long>\\-)`;\nexports.AlphabetPattern = `[a-z]`;\nexports.EnglishLength = 4;\n\n\n//# sourceURL=webpack://alkana/./src/types/wordPattern.ts?");

/***/ }),

/***/ "./src/utils/htmlElement.ts":
/*!**********************************!*\
  !*** ./src/utils/htmlElement.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.qsStrict = void 0;\nfunction qsStrict(parent, query) {\n    const result = parent.querySelector(query);\n    if (result == null)\n        throw new Error(`${query}が見つかりません`);\n    return result;\n}\nexports.qsStrict = qsStrict;\n\n\n//# sourceURL=webpack://alkana/./src/utils/htmlElement.ts?");

/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.nonNullable = void 0;\n__exportStar(__webpack_require__(/*! ./regExp */ \"./src/utils/regExp.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./htmlElement */ \"./src/utils/htmlElement.ts\"), exports);\n__exportStar(__webpack_require__(/*! ./matchResult */ \"./src/utils/matchResult.ts\"), exports);\nconst nonNullable = (value) => value != null;\nexports.nonNullable = nonNullable;\n\n\n//# sourceURL=webpack://alkana/./src/utils/index.ts?");

/***/ }),

/***/ "./src/utils/matchResult.ts":
/*!**********************************!*\
  !*** ./src/utils/matchResult.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sortByPriorityConversion = exports.filterUniqueMatchPattern = exports.convertToMatchResult = void 0;\nfunction convertToMatchResult(matches, pattern, afterConversion) {\n    return [...matches].map((match) => {\n        var _a, _b, _c;\n        const mainPattern = match.groups.main;\n        const startIndex = ((_a = match.index) !== null && _a !== void 0 ? _a : 0) + ((_c = (_b = match.groups) === null || _b === void 0 ? void 0 : _b.prefix.length) !== null && _c !== void 0 ? _c : 0);\n        return {\n            mainPattern,\n            startIndex,\n            endIndex: startIndex + mainPattern.length,\n            pattern,\n            afterConversion,\n        };\n    });\n}\nexports.convertToMatchResult = convertToMatchResult;\nfunction filterUniqueMatchPattern(list) {\n    return list.filter((a, index) => list.slice(index + 1).some((b) => a.pattern === b.pattern) === false);\n}\nexports.filterUniqueMatchPattern = filterUniqueMatchPattern;\nfunction sortByPriorityConversion(a, b) {\n    // indexが小さい\n    const diffIndex = a.startIndex - b.startIndex;\n    if (diffIndex !== 0) {\n        return diffIndex;\n    }\n    // 文字数が多い\n    return b.mainPattern.length - a.mainPattern.length;\n}\nexports.sortByPriorityConversion = sortByPriorityConversion;\n\n\n//# sourceURL=webpack://alkana/./src/utils/matchResult.ts?");

/***/ }),

/***/ "./src/utils/regExp.ts":
/*!*****************************!*\
  !*** ./src/utils/regExp.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.insertSpaceBothSideAtNumbers = exports.insertSpaceBeforeUpperCase = exports.replaceSymbolToSpaceOrOmit = exports.hasKanaOnly = exports.hasNumber = exports.hasAlphabet = exports.escapeRegExp = exports.matchAllAtIgnoreCase = void 0;\nconst types = __importStar(__webpack_require__(/*! ../types */ \"./src/types/index.ts\"));\nfunction matchAllAtIgnoreCase(pattern, value) {\n    // 大文字小文字区別しない\n    const reg = new RegExp(pattern, \"ig\");\n    return value.matchAll(reg);\n}\nexports.matchAllAtIgnoreCase = matchAllAtIgnoreCase;\nfunction escapeRegExp(value) {\n    // 特殊文字をエスケープする正規表現パターン\n    const regexPattern = /[-/\\\\^$*+?.()|[\\]{}]/g;\n    // 特殊文字をエスケープして返す\n    return value.replace(regexPattern, \"\\\\$&\");\n}\nexports.escapeRegExp = escapeRegExp;\nfunction hasAlphabet(value) {\n    const reg = new RegExp(types.AlphabetPattern, \"i\");\n    return reg.test(value);\n}\nexports.hasAlphabet = hasAlphabet;\nfunction hasNumber(value) {\n    const reg = new RegExp(\"\\\\d\");\n    return reg.test(value);\n}\nexports.hasNumber = hasNumber;\nfunction hasKanaOnly(value) {\n    return hasAlphabet(value) === false && hasNumber(value) === false;\n}\nexports.hasKanaOnly = hasKanaOnly;\nfunction replaceSymbolToSpaceOrOmit(value) {\n    // 除外\n    const omitValue = value.replace(new RegExp(\"'\", \"g\"), \"\");\n    // スペースに変換\n    return omitValue.replace(new RegExp(\"[!-/:-@[-`{-~]\", \"g\"), \" \");\n}\nexports.replaceSymbolToSpaceOrOmit = replaceSymbolToSpaceOrOmit;\nfunction insertSpaceBeforeUpperCase(value) {\n    const reg = new RegExp(\"([A-Z])\", \"g\");\n    return value.replace(reg, \" $1\").trim();\n}\nexports.insertSpaceBeforeUpperCase = insertSpaceBeforeUpperCase;\nfunction insertSpaceBothSideAtNumbers(value) {\n    const reg = new RegExp(\"(\\\\d+)\", \"g\");\n    return value.replace(reg, \" $1 \").trim();\n}\nexports.insertSpaceBothSideAtNumbers = insertSpaceBothSideAtNumbers;\n\n\n//# sourceURL=webpack://alkana/./src/utils/regExp.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/page/MainPageManager.ts");
/******/ 	alkana = __webpack_exports__;
/******/ 	
/******/ })()
;